#-------------------------------------------------------------------
# M√¥-ƒëun n√†y s·ª≠ d·ª•ng Ollama ƒë·ªÉ ph√¢n t√≠ch ng·ªØ nghƒ©a c√¢u l·ªánh ti·∫øng Vi·ªát
#  - G·ª≠i c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng t·ªõi Ollama API
#  - Nh·∫≠n ph·∫£n h·ªìi JSON t·ª´ Ollama API
#  - H√†nh ƒë·ªông v·ªõi d·ªØ li·ªáu c·∫£m bi·∫øn v√† ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã
#  - C√≥ th·ªÉ ƒë∆∞·ª£c m·ªü r·ªông ƒë·ªÉ ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã th·ª±c t·∫ø
#  - C√≥ th·ªÉ ƒë∆∞·ª£c m·ªü r·ªông ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi chung v·ªÅ h·ªá th·ªëng
#-------------------------------------------------------------------
import requests
import json
import os
from AIchatbot.mqttservice import get_temperature
from AIchatbot.mqttservice import get_humidity
from AIchatbot.mqttservice import get_energy_consumption
from AIchatbot.mqttservice import turn_on_fan, turn_off_fan, turn_on_light, turn_off_light

# üîß Thay ƒë·ªïi n·∫øu b·∫°n ch·∫°y Ollama tr√™n port kh√°c
OLLAMA_API = "http://localhost:11434"

# Danh s√°ch thi·∫øt b·ªã & h√†nh ƒë·ªông h·ª£p l·ªá
valid_devices = [
    "light", 
    "fan", 
    "DHT",  # c·∫£m bi·∫øn nhi·ªát ƒë·ªô ƒë·ªô ·∫©m
    "PZEM"  # c·∫£m bi·∫øn ƒëi·ªán nƒÉng
]
valid_actions = [
    "on", 
    "off", 
    "query_temperature", 
    "query_humidity", 
    "query_power",
    "general_question"  # Th√™m lo·∫°i h√†nh ƒë·ªông cho c√¢u h·ªèi chung
]

def build_system_message():
    """
    H·ªá th·ªëng s·∫Ω m√¥ t·∫£ nhi·ªám v·ª• NLU v√† schema JSON (ƒë∆∞·ª£c Ollama h·ªó tr·ª£).
    """
    return f"""You are an NLU module. Receive a English sentence, analyze it, and return a JSON object with 2 fields:
- device: the name of the device (one of {valid_devices}) or null
- action: one of {valid_actions} or null
If the user asks "temperature", the action is "query_temperature", and the device is "DHT".
If the user asks "humidity", the action is "query_humidity", and the device is "DHT".
If the user asks "power consumption this month", the action is "query_power", and the device is "PZEM".
If the command is to turn on/off the light/fan, the action is "on"/"off", and the device is "light"/"fan".
If the user asks about the system's capabilities, how to use the system, personal info or related to customer service, set action to "general_question" and device to null.
If it cannot be determined, return null for that field."""

def parse_intent(user_text: str) -> dict:
    """
    G·ª≠i y√™u c·∫ßu t·ªõi Ollama /api/chat v·ªõi JSON schema ƒë·ªÉ tr·∫£ v·ªÅ ch√≠nh x√°c JSON.
    """
    schema = {
        "type": "object",
        "properties": {
            "device": {
                "type": ["string", "null"],
                "enum": valid_devices + [None]
            },
            "action": {
                "type": ["string", "null"],
                "enum": valid_actions + [None]
            }
        },
        "required": ["device", "action"]
    }

    payload = {
        "model": "llama3.2",
        "messages": [
            {"role": "system", "content": build_system_message()},
            {"role": "user",   "content": user_text}
        ],
        "format": schema,
        "stream": False
    }

    resp = requests.post(f"{OLLAMA_API}/api/chat", json=payload)
    resp.raise_for_status()
    data = resp.json()
    content = data["message"]["content"]
    intent = json.loads(content)
    return intent

def load_guide():
    """
    ƒê·ªçc file guide.txt v√† tr·∫£ v·ªÅ n·ªôi dung d∆∞·ªõi d·∫°ng dict.
    """
    guide_path = os.path.join(os.path.dirname(__file__), "guide.txt")
    if not os.path.exists(guide_path):
        return None
    with open(guide_path, "r", encoding="utf-8") as f:
        return json.load(f)

def find_guide_answer(user_text, guide_data):
    """
    T√¨m ki·∫øm n·ªôi dung ph√π h·ª£p trong guide_data d·ª±a tr√™n user_text.
    Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi ph√π h·ª£p ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y.
    """
    if not guide_data:
        return None
    user_text_lower = user_text.lower()
    # D√≤ theo t·ª´ng m·ª•c
    for key, items in guide_data.items():
        for item in items:
            # N·∫øu user_text ch·ª©a t·ª´ kh√≥a c·ªßa item ho·∫∑c ng∆∞·ª£c l·∫°i
            if any(word in user_text_lower for word in item.lower().split()):
                return item
    return None

def ask_again(user_text):
    """
    Send a prompt to Ollama, requesting an answer based on the content of guide.txt for the user's question.
    """
    guide_txt_path = os.path.join(os.path.dirname(__file__), "guide.txt")
    if os.path.exists(guide_txt_path):
        with open(guide_txt_path, "r", encoding="utf-8") as f:
            guide_content = f.read()
        prompt = (
            "Based on the following information about the system and user guide:\n"
            f"{guide_content}\n"
            f"Please provide a concise and accurate answer to the user's question: \"{user_text}\""
        )
        ollama_payload = {
            "model": "llama3.2",
            "messages": [
                {"role": "system", "content": "You are an assistant supporting users based on the system guide."},
                {"role": "user", "content": prompt}
            ],
            "stream": False
        }
        try:
            resp = requests.post(f"{OLLAMA_API}/api/chat", json=ollama_payload)
            resp.raise_for_status()
            data = resp.json()
            content = data["message"]["content"]
            return content.strip()
        except Exception as e:
            print(f"Error when querying Ollama: {e}")
            return "Unable to retrieve information from the system guide."
    else:
        return "Guide file guide.txt not found."

def control_device(device, action, user_text=None):
    """
    H√†m m·∫´u ƒë·ªÉ ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã ho·∫∑c tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n intent.
    Tr·∫£ v·ªÅ ph·∫£n h·ªìi d·∫°ng chu·ªói.
    """
    if action in ["on", "off"]:
        # ƒêi·ªÅu khi·ªÉn thi·∫øt b·ªã th·ª±c t·∫ø
        if device == "fan":
            if action == "on":
                turn_on_fan()
                return "ƒê√£ b·∫≠t qu·∫°t."
            else:
                turn_off_fan()
                return "ƒê√£ t·∫Øt qu·∫°t."
        elif device == "light":
            if action == "on":
                turn_on_light()
                return "ƒê√£ b·∫≠t ƒë√®n."
            else:
                turn_off_light()
                return "ƒê√£ t·∫Øt ƒë√®n."
        else:
            return f"‚Üí Control {device=} {action=}"
    elif device == "DHT" and action == "query_temperature":
        temperature = get_temperature()
        return f"Temperature now is {temperature}¬∞C." if temperature else "Unable to get temperature data."
    elif device == "DHT" and action == "query_humidity":
        humidity = get_humidity()
        return f"Humidity now is {humidity}%." if humidity else "Unable to get humidity data."
    elif device == "PZEM" and action == "query_power":
        power = get_energy_consumption()
        return f"Power this month is {power} kWh." if power else "Unable to get power data."
    elif action == "general_question":
        guide_data = load_guide()
        # answer = find_guide_answer(user_text or "", guide_data)
        if guide_data:
            print(ask_again(user_text or ""))
        else:
            print("The information you requested is not available. Please contact customer service for assistance.")
        return None
    else:
        print("Cannot control device or answer question.")
        return None

__all__ = ["parse_intent", "control_device", "load_guide", "find_guide_answer"]