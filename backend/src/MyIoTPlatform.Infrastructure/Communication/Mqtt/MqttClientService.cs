using MediatR; // C·∫ßn cho ISender
using Microsoft.Extensions.DependencyInjection; // C·∫ßn cho IServiceProvider v√† CreateScope
using Microsoft.Extensions.Hosting; // C·∫ßn cho BackgroundService
using Microsoft.Extensions.Logging; // C·∫ßn cho ILogger
using Microsoft.Extensions.Options; // C·∫ßn cho IOptions<MqttConfig>
using MQTTnet; // Import namespace g·ªëc
using MQTTnet.Client;
using MQTTnet.Extensions.ManagedClient;
using MQTTnet.Protocol; // C·∫ßn cho MqttQualityOfServiceLevel
using MyIoTPlatform.Application.Features.Telemetry.Commands; // Command ƒë·ªÉ x·ª≠ l√Ω telemetry
using MyIoTPlatform.Application.Interfaces.Communication; // Interface IMqttClientService
using System;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic; // C·∫ßn cho List ho·∫∑c Array

namespace MyIoTPlatform.Infrastructure.Communication.Mqtt;

public class MqttClientService : BackgroundService, IMqttClientService
{
    private readonly ILogger<MqttClientService> _logger;
    private readonly MqttConfig _mqttConfig;
    private readonly IServiceProvider _serviceProvider; // D√πng ƒë·ªÉ t·∫°o Scope
    private IManagedMqttClient? _mqttClient; // D√πng Managed client ƒë·ªÉ t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i

    public MqttClientService(
        IOptions<MqttConfig> mqttConfigOptions, // Inject IOptions
        ILogger<MqttClientService> logger,
        IServiceProvider serviceProvider) // Inject IServiceProvider
    {
        _logger = logger;
        _mqttConfig = mqttConfigOptions.Value; // L·∫•y gi√° tr·ªã c·∫•u h√¨nh t·ª´ IOptions
        _serviceProvider = serviceProvider;
    }

    // Ph∆∞∆°ng th·ª©c ch√≠nh c·ªßa BackgroundService, ch·∫°y khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        var factory = new MqttFactory(); // Kh√¥ng truy·ªÅn logger v√†o Factory
        _mqttClient = factory.CreateManagedMqttClient();

        // --- C·∫•u h√¨nh Client Options ---
        var clientOptionsBuilder = new MqttClientOptionsBuilder()
            .WithClientId(_mqttConfig.ClientId ?? $"MyIoTBackend_{Guid.NewGuid()}")
            .WithTcpServer(_mqttConfig.Host, _mqttConfig.Port)
            .WithCleanSession()
            .WithKeepAlivePeriod(TimeSpan.FromSeconds(60)); // Gi√° tr·ªã m·∫∑c ƒë·ªãnh 60 gi√¢y

        // Th√™m Credentials n·∫øu c√≥
        if (!string.IsNullOrEmpty(_mqttConfig.Username))
        {
            clientOptionsBuilder.WithCredentials(_mqttConfig.Username, _mqttConfig.Password);
        }

        var clientOptions = clientOptionsBuilder.Build();

        // --- C·∫•u h√¨nh Managed Client Options ---
        // Managed client s·∫Ω t·ª± ƒë·ªông qu·∫£n l√Ω k·∫øt n·ªëi v√† retry
        var managedOptions = new ManagedMqttClientOptionsBuilder()
            .WithAutoReconnectDelay(TimeSpan.FromSeconds(5)) // Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠ k·∫øt n·ªëi l·∫°i
            .WithClientOptions(clientOptions)
            .Build();

        // --- ƒêƒÉng k√Ω c√°c Event Handler TR∆Ø·ªöC KHI START ---
        _mqttClient.ConnectedAsync += OnConnectedAsync;
        _mqttClient.DisconnectedAsync += OnDisconnectedAsync;
        _mqttClient.ApplicationMessageReceivedAsync += OnMessageReceivedAsync;
        // C√≥ th·ªÉ ƒëƒÉng k√Ω th√™m c√°c handler kh√°c n·∫øu c·∫ßn

        _logger.LogInformation("Starting MQTT client connection to {Host}:{Port}...", _mqttConfig.Host, _mqttConfig.Port);
        try
        {
            // B·∫Øt ƒë·∫ßu k·∫øt n·ªëi v√† duy tr√¨ k·∫øt n·ªëi
            await _mqttClient.StartAsync(managedOptions);
        }
        catch (Exception ex)
        {
            _logger.LogCritical(ex, "FATAL ERROR: Could not start MQTT client.");
            // C√≥ th·ªÉ d·ª´ng ·ª©ng d·ª•ng ·ªü ƒë√¢y n·∫øu MQTT l√† b·∫Øt bu·ªôc
            return;
        }


        // --- Gi·ªØ cho Background Service ch·∫°y ---
        // stoppingToken s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t khi ·ª©ng d·ª•ng y√™u c·∫ßu d·ª´ng (shutdown)
        while (!stoppingToken.IsCancellationRequested)
        {
            // C√≥ th·ªÉ th√™m logic ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi ƒë·ªãnh k·ª≥ ·ªü ƒë√¢y n·∫øu c·∫ßn
            try
            {
                // Ch·ªù m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn thay v√¨ v√¥ h·∫°n
                await Task.Delay(TimeSpan.FromSeconds(30), stoppingToken);
                
                // Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi ƒë·ªãnh k·ª≥
                if (_mqttClient != null && !_mqttClient.IsConnected)
                {
                    _logger.LogWarning("MQTT client is not connected. Waiting for auto-reconnect...");
                }
            }
            catch (TaskCanceledException)
            {
                // B·∫Øt l·ªói khi Task.Delay b·ªã h·ªßy b·ªüi stoppingToken
                _logger.LogInformation("MQTT client stopping requested.");
            }
        }

        // --- D·ªçn d·∫πp khi ·ª©ng d·ª•ng d·ª´ng ---
        _logger.LogInformation("Stopping MQTT client...");
        try
        {
            // H·ªßy ƒëƒÉng k√Ω c√°c handler ƒë·ªÉ tr√°nh l·ªói khi dispose
            if (_mqttClient != null)
            {
                _mqttClient.ConnectedAsync -= OnConnectedAsync;
                _mqttClient.DisconnectedAsync -= OnDisconnectedAsync;
                _mqttClient.ApplicationMessageReceivedAsync -= OnMessageReceivedAsync;
                await _mqttClient.StopAsync(); // D·ª´ng client m·ªôt c√°ch nh·∫π nh√†ng
                _mqttClient.Dispose(); // Gi·∫£i ph√≥ng t√†i nguy√™n
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error stopping MQTT client.");
        }
        _logger.LogInformation("MQTT client stopped.");
    }

    // --- Event Handler: K·∫øt n·ªëi th√†nh c√¥ng ---
    private async Task OnConnectedAsync(MqttClientConnectedEventArgs e)
    {
        _logger.LogInformation("Successfully connected to MQTT Broker.");
        if (_mqttClient == null) return;

        try
        {
            // Subscribe v√†o topic telemetry v√† state
            var telemetryTopic = "devices/+/telemetry";
            var stateTopic = "devices/+/state";
            
            _logger.LogInformation("Subscribing to topics: {TelemetryTopic}, {StateTopic}", telemetryTopic, stateTopic);
            
            var topicFilters = new[]
            {
                new MqttTopicFilterBuilder()
                    .WithTopic(telemetryTopic)
                    .WithQualityOfServiceLevel(MqttQualityOfServiceLevel.AtLeastOnce)
                    .Build(),
                new MqttTopicFilterBuilder()
                    .WithTopic(stateTopic)
                    .WithQualityOfServiceLevel(MqttQualityOfServiceLevel.AtLeastOnce)
                    .Build()
            };
            
            await _mqttClient.SubscribeAsync(topicFilters);
            
            _logger.LogInformation("Successfully subscribed to topics");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error subscribing to topics");
        }
    }

    // --- Event Handler: M·∫•t k·∫øt n·ªëi ---
    private Task OnDisconnectedAsync(MqttClientDisconnectedEventArgs e)
    {
        // Managed Client s·∫Ω t·ª± ƒë·ªông th·ª≠ k·∫øt n·ªëi l·∫°i
        _logger.LogWarning("Disconnected from MQTT Broker. Reason: {Reason}. Will try to reconnect.", e.Reason);
        return Task.CompletedTask;
    }

    // --- Event Handler: Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn ---
    private async Task OnMessageReceivedAsync(MqttApplicationMessageReceivedEventArgs e)
    {
        var topic = e.ApplicationMessage.Topic;
        string? payload = null;
        
        // === Log chi ti·∫øt khi nh·∫≠n tin nh·∫Øn ===
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("\n==================================================");
        Console.WriteLine($"üîî TIN NH·∫ÆN MQTT NH·∫¨N ƒê∆Ø·ª¢C - TOPIC: {topic}");
        Console.WriteLine("==================================================");
        
        try
        {
            // L·∫•y n·ªôi dung tin nh·∫Øn
            payload = Encoding.UTF8.GetString(e.ApplicationMessage.PayloadSegment);
            
            // Hi·ªÉn th·ªã payload
            Console.WriteLine($"üìÑ PAYLOAD: {payload}");
            
            // Hi·ªÉn th·ªã hexdump ƒë·ªÉ debug
            var hexPayload = BitConverter.ToString(e.ApplicationMessage.PayloadSegment.ToArray());
            Console.WriteLine($"üîç HEX: {hexPayload}");
            
            // Th√¥ng tin QoS v√† Retain
            Console.WriteLine($"üìä QoS: {e.ApplicationMessage.QualityOfServiceLevel}, Retain: {e.ApplicationMessage.Retain}");
            
            // ƒê·∫∑t l·∫°i m√†u console
            Console.ResetColor();
            
            // Log th√¥ng th∆∞·ªùng
            _logger.LogInformation("Received message on topic '{Topic}': {Payload}", topic, payload);
            
            // Validate JSON format
            if (string.IsNullOrEmpty(payload) || payload.Trim().Length == 0)
            {
                _logger.LogWarning("Empty payload received for topic {Topic}", topic);
                return;
            }
            
            // Ki·ªÉm tra payload c√≥ ph·∫£i l√† JSON h·ª£p l·ªá kh√¥ng
            try
            {
                System.Text.Json.JsonDocument.Parse(payload);
                Console.WriteLine("‚úÖ JSON h·ª£p l·ªá!");
            }
            catch (System.Text.Json.JsonException jsonEx)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"‚ùå JSON kh√¥ng h·ª£p l·ªá: {jsonEx.Message}");
                Console.ResetColor();
                _logger.LogWarning("Invalid JSON payload received for topic {Topic}: {Error}", topic, jsonEx.Message);
                _logger.LogDebug("Invalid payload content: {Payload}", payload);
                return;
            }

            // !!! QUAN TR·ªåNG: T·∫°o Scope ƒë·ªÉ l·∫•y Scoped Services !!!
            using (var scope = _serviceProvider.CreateScope())
            {
                // L·∫•y ISender (MediatR) t·ª´ Scope m·ªõi
                var sender = scope.ServiceProvider.GetRequiredService<ISender>();

                try
                {
                    // 1. Parse DeviceId t·ª´ Topic
                    var deviceId = ParseDeviceIdFromTopic(topic);
                    Console.WriteLine($"üì± Device ID: {deviceId}");

                    if (deviceId != Guid.Empty)
                    {
                        // 2. T·∫°o Command
                        var command = new IngestTelemetryCommand(deviceId, payload);

                        // 3. G·ª≠i Command ƒë·∫øn Application Handler
                        Console.WriteLine("üöÄ G·ª≠i l·ªánh x·ª≠ l√Ω ƒë·∫øn application handler...");
                        await sender.Send(command, CancellationToken.None);

                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine($"‚úÖ X·ª≠ l√Ω th√†nh c√¥ng tin nh·∫Øn t·ª´ thi·∫øt b·ªã {deviceId} tr√™n topic {topic}");
                        Console.ResetColor();
                        _logger.LogInformation("Successfully processed message from device {DeviceId} on topic {Topic}", deviceId, topic);
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.WriteLine("‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch Device ID t·ª´ topic");
                        Console.ResetColor();
                        _logger.LogWarning("Could not parse DeviceId from topic: {Topic}", topic);
                    }
                }
                catch (Exception ex)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn: {ex.Message}");
                    Console.WriteLine(ex.StackTrace);
                    Console.ResetColor();
                    _logger.LogError(ex, "Error processing message from topic {Topic}. Payload: {Payload}", topic, payload);
                }
            }
            
            Console.WriteLine("==================================================\n");
        }
        catch (Exception ex)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"‚ùå L·ªñI NGHI√äM TR·ªåNG khi x·ª≠ l√Ω tin nh·∫Øn: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
            Console.ResetColor();
            _logger.LogError(ex, "Critical error during message processing from topic {Topic}", topic);
        }
    }

    // --- Tri·ªÉn khai ph∆∞∆°ng th·ª©c Publish t·ª´ Interface IMqttClientService ---
    public async Task PublishAsync(string topic, string payload)
    {
        if (_mqttClient == null || !_mqttClient.IsStarted)
        {
            _logger.LogWarning("MQTT client not started, cannot publish to topic {Topic}", topic);
            return;
        }

        try
        {
            var message = new MqttApplicationMessageBuilder()
                .WithTopic(topic)
                .WithPayload(payload)
                .WithRetainFlag(false)
                .WithQualityOfServiceLevel(MqttQualityOfServiceLevel.AtLeastOnce)
                .Build();

            await _mqttClient.EnqueueAsync(message);
            _logger.LogInformation("Successfully enqueued message to topic {Topic}", topic);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Exception occurred while trying to enqueue message to topic {Topic}", topic);
        }
    }

    public async Task PublishAsync(string topic, string payload, bool retain, int qosLevel)
    {
        if (_mqttClient == null || !_mqttClient.IsStarted)
        {
            _logger.LogWarning("MQTT client is not started or null. Cannot proceed.");
            return;
        }

        try
        {
            // Ki·ªÉm tra v√† gi·ªõi h·∫°n gi√° tr·ªã qosLevel h·ª£p l·ªá (0-2)
            qosLevel = Math.Max(0, Math.Min(2, qosLevel));
            
            var message = new MqttApplicationMessageBuilder()
                .WithTopic(topic)
                .WithPayload(payload)
                .WithRetainFlag(retain)
                .WithQualityOfServiceLevel((MqttQualityOfServiceLevel)qosLevel)
                .Build();

            await _mqttClient.EnqueueAsync(message);
            _logger.LogInformation("Message enqueued successfully to topic {Topic}", topic);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to enqueue message to topic {Topic}", topic);
        }
    }

    // --- H√†m Helper ƒë·ªÉ Parse DeviceId ---
    private Guid ParseDeviceIdFromTopic(string topic)
    {
        // Gi·∫£ s·ª≠ topic c√≥ d·∫°ng "devices/{deviceId}/telemetry" ho·∫∑c "devices/{deviceId}/state"
        try
        {
            var parts = topic.Split('/');
            if (parts.Length >= 3 && parts[0].Equals("devices", StringComparison.OrdinalIgnoreCase))
            {
                // N·∫øu deviceId kh√¥ng ph·∫£i l√† Guid, th·ª≠ t·∫°o m·ªôt Guid t·ª´ string
                if (!Guid.TryParse(parts[1], out var deviceId))
                {
                    // N·∫øu kh√¥ng ph·∫£i Guid, t·∫°o Guid d·ª±a tr√™n hash c·ªßa string
                    deviceId = CreateDeterministicGuid(parts[1]);
                    _logger.LogDebug("Created deterministic GUID {Guid} for device identifier {DeviceId}", deviceId, parts[1]);
                }
                return deviceId;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error parsing device ID from topic: {Topic}", topic);
        }
        return Guid.Empty; // Tr·∫£ v·ªÅ Empty n·∫øu kh√¥ng parse ƒë∆∞·ª£c
    }
    
    // T·∫°o Guid t·ª´ string ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªùng h·ª£p identifier kh√¥ng ph·∫£i Guid
    private Guid CreateDeterministicGuid(string input)
    {
        if (string.IsNullOrEmpty(input))
            return Guid.Empty;
            
        // T·∫°o hash t·ª´ input
        using var md5 = System.Security.Cryptography.MD5.Create();
        var hash = md5.ComputeHash(Encoding.UTF8.GetBytes(input));
        
        // Chuy·ªÉn hash th√†nh Guid (version 3 - MD5)
        var guid = new Guid(hash);
        return guid;
    }

    public async Task SubscribeAsync(string topic)
    {
        if (_mqttClient == null)
        {
            _logger.LogWarning("MQTT client is null, cannot subscribe to topic {Topic}", topic);
            return;
        }

        try
        {
            _logger.LogInformation("Explicitly subscribing to topic: {Topic}", topic);
            
            var topicFilter = new MqttTopicFilterBuilder()
                .WithTopic(topic)
                .WithQualityOfServiceLevel(MqttQualityOfServiceLevel.AtLeastOnce)
                .Build();
                
            await _mqttClient.SubscribeAsync(new[] { topicFilter });
                
            _logger.LogInformation("Successfully subscribed to topic: {Topic}", topic);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error explicitly subscribing to topic {Topic}", topic);
        }
    }
}