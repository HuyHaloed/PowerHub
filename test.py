#-------------------------------------------------------------------
#  File ƒë·ªÉ ki·ªÉm tra NLU v·ªõi Ollama API
#  - G·ª≠i c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng t·ªõi Ollama API
#  - Nh·∫≠n ph·∫£n h·ªìi JSON t·ª´ Ollama API
#  - H√†nh ƒë·ªông v·ªõi d·ªØ li·ªáu c·∫£m bi·∫øn v√† ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã
#-------------------------------------------------------------------
import requests
import json

# üîß Thay ƒë·ªïi n·∫øu b·∫°n ch·∫°y Ollama tr√™n port kh√°c
OLLAMA_API = "http://localhost:11434"

# Danh s√°ch thi·∫øt b·ªã & h√†nh ƒë·ªông h·ª£p l·ªá
valid_devices = [
    "light", 
    "fan", 
    "DHT",  # c·∫£m bi·∫øn nhi·ªát ƒë·ªô ƒë·ªô ·∫©m
    "PZEM"  # c·∫£m bi·∫øn ƒëi·ªán nƒÉng
]
valid_actions = [
    "on", 
    "off", 
    "query_temperature", 
    "query_humidity", 
    "query_power",
    "general_question"  # Th√™m lo·∫°i h√†nh ƒë·ªông cho c√¢u h·ªèi chung
]

def build_system_message():
    """
    H·ªá th·ªëng s·∫Ω m√¥ t·∫£ nhi·ªám v·ª• NLU v√† schema JSON (ƒë∆∞·ª£c Ollama h·ªó tr·ª£).
    """
    return f"""You are an NLU module. Receive a Vietnamese sentence, analyze it, and return a JSON object with 2 fields:
- device: the name of the device (one of {valid_devices}) or null
- action: one of {valid_actions} or null
If the user asks "current temperature", the action is "query_temperature", and the device is "DHT".
If the user asks "current humidity", the action is "query_humidity", and the device is "DHT".
If the user asks "power consumption this month", the action is "query_power", and the device is "PZEM".
If the command is to turn on/off the light/fan, the action is "on"/"off", and the device is "light"/"fan".
If the user asks about the system's capabilities, how to use, or other general questions, set action to "general_question" and device to null.
If it cannot be determined, return null for that field."""

def parse_intent(user_text: str) -> dict:
    """
    G·ª≠i y√™u c·∫ßu t·ªõi Ollama /api/chat v·ªõi JSON schema ƒë·ªÉ tr·∫£ v·ªÅ ch√≠nh x√°c JSON.
    """
    schema = {
        "type": "object",
        "properties": {
            "device": {
                "type": ["string", "null"],
                "enum": valid_devices + [None]
            },
            "action": {
                "type": ["string", "null"],
                "enum": valid_actions + [None]
            }
        },
        "required": ["device", "action"]
    }

    payload = {
        "model": "llama3.2",
        "messages": [
            {"role": "system", "content": build_system_message()},
            {"role": "user",   "content": user_text}
        ],
        "format": schema,
        "stream": False
    }

    resp = requests.post(f"{OLLAMA_API}/api/chat", json=payload)
    resp.raise_for_status()
    data = resp.json()
    content = data["message"]["content"]
    intent = json.loads(content)
    return intent

# V√≠ d·ª• s·ª≠ d·ª•ng
if __name__ == "__main__":
    # Gi·∫£ s·ª≠ b·∫°n c√≥ c√°c h√†m l·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn v√† ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã
    def control_device(device, action):
        if action in ["on", "off"]:
            print(f"‚Üí Control {device=} {action=}")
            # TODO: call MQTT / HTTP / Serial ... ·ªü ƒë√¢y
        elif device == "DHT" and action == "query_temperature":
            # TODO: l·∫•y d·ªØ li·ªáu nhi·ªát ƒë·ªô th·ª±c t·∫ø
            print("Temperature now is 25¬∞C.")
        elif device == "DHT" and action == "query_humidity":
            # TODO: l·∫•y d·ªØ li·ªáu ƒë·ªô ·∫©m th·ª±c t·∫ø
            print("Humidity now is 50%.")
        elif device == "PZEM" and action == "query_power":
            # TODO: l·∫•y d·ªØ li·ªáu ƒëi·ªán nƒÉng ti√™u th·ª• th·ª±c t·∫ø
            print("Power this month is 120 kWh.")
        elif action == "general_question":
            # Tr·∫£ l·ªùi c√°c c√¢u h·ªèi chung v·ªÅ h·ªá th·ªëng
            print("I can help you control lights, fans, check temperature, humidity, and power consumption. You can ask: 'Turn on the light', 'What is the current temperature?', 'How much power was consumed this month?', etc.")
        else:
            print("Cannot control device or answer question.")

    while True:
        cmd = input("You says: ")
        intent = parse_intent(cmd)
        print("Parsed intent:", intent)
        if intent["action"] == "general_question":
            control_device(None, "general_question")
        elif intent["device"] and intent["action"]:
            control_device(intent["device"], intent["action"])
        else:
            print("Request could not be recognized")