import { useState } from "react";
import logo from "@/assets/logo.png";
import { Button } from "../ui/button";
import { useLocation, Link, useNavigate } from "react-router-dom";
import { cn } from "@/lib/utils";
import { AlignRight, X, Bell } from "lucide-react";
import { paths } from "@/utils/path";
import { useAccount } from "@/hooks/useAccount";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { toast } from "react-toastify";
import path from "path";

interface ItemProp {
  name: string;
  path: string;
}

interface Notification {
  id: number;
  title: string;
  message: string;
  time: string;
  isRead: boolean;
  type: "appointment" | "system" | "update";
}

const items: ItemProp[] = [
  { name: "Trang chủ", path: paths.Home },
  { name: "Blog", path: paths.Clinic },
  { name: "Hỏi đáp", path: paths.DoctorSearch },
  { name: "Liên hệ với chúng tôi", path: "/contact" },
];

const mockNotifications: Notification[] = [
  {
    id: 1,
    title: "Xác nhận lịch hẹn",
    message: "Lịch hẹn với BS. Trần Thị B đã được xác nhận",
    time: "5 phút trước",
    isRead: false,
    type: "appointment",
  },
  {
    id: 2,
    title: "Nhắc nhở lịch hẹn",
    message: "Bạn có lịch hẹn khám vào ngày mai lúc 9:00",
    time: "1 giờ trước",
    isRead: false,
    type: "appointment",
  },
  {
    id: 3,
    title: "Cập nhật hệ thống",
    message: "Hệ thống vừa được cập nhật tính năng mới",
    time: "2 giờ trước",
    isRead: true,
    type: "system",
  },
];

export default function Header() {
  const location = useLocation();
  const [isOpen, setIsOpen] = useState(false);

  const navigate = useNavigate();
  const [notifications, setNotifications] =
    useState<Notification[]>(mockNotifications);
  const unreadCount = notifications.filter((n) => !n.isRead).length;

  const handleLogout = () => {
    localStorage.removeItem("token");
    toast.success("Đăng xuất thành công");
    navigate("/sign-in");
  };

  const handleReadNotification = (id: number) => {
    setNotifications(
      notifications.map((notif) =>
        notif.id === id ? { ...notif, isRead: true } : notif,
      ),
    );
  };

  const handleReadAll = () => {
    setNotifications(
      notifications.map((notif) => ({ ...notif, isRead: true })),
    );
  };

  return (
    <div className="flex items-center justify-between px-4 py-3 bg-gray-900 text-white">
      {/* Left side navigation */}
      <div className="hidden md:flex items-center space-x-8">
        <Link 
          to={paths.Home}
          className={cn(
            "text-sm font-medium",
            location.pathname === paths.Home ? "text-blue-400" : "text-white"
          )}
        >
          Trang chủ
        </Link>
        <Link 
          to={paths.Clinic}
          className={cn(
            "text-sm font-medium",
            location.pathname === paths.Clinic ? "text-blue-400" : "text-white"
          )}
        >
          Blog
        </Link>
        <Link 
          to={paths.DoctorSearch}
          className={cn(
            "text-sm font-medium",
            location.pathname === paths.DoctorSearch ? "text-blue-400" : "text-white"
          )}
        >
          Hỏi đáp
        </Link>
        <Link 
          to="/contact"
          className={cn(
            "text-sm font-medium",
            location.pathname === "/contact" ? "text-blue-400" : "text-white"
          )}
        >
          Pricing
        </Link>
      </div>

      {/* Mobile menu button - only visible on small screens */}
      <div className="md:hidden">
        <AlignRight
          size={24}
          className="cursor-pointer text-white"
          onClick={() => setIsOpen(true)}
        />
      </div>

      {/* Center logo and brand name */}
      <div className="flex items-center justify-center">
        <Link to={paths.Home} className="flex items-center">
          <img src={logo} alt="logo" className="h-8 w-8" />
          <span className="ml-2 text-xl font-bold">POWER HUB</span>
        </Link>
      </div>

      {/* Right side actions */}
      <div className="flex items-center space-x-4">
        <Link to="/talk-to-sales" className="hidden md:block text-sm font-medium text-white">
          Talk to sales
        </Link>
        
        <button className="hidden md:block text-white">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="2" y1="12" x2="22" y2="12"></line>
            <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>
          </svg>
        </button>
        
        <button className="hidden md:block text-white">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
          </svg>
        </button>
        
        <Link 
          to="/sign-in" 
          className="text-white text-sm font-medium"
        >
          Đăng nhập
        </Link>
      </div>

      {/* Mobile sidebar menu */}
      <div
        className={cn(
          "fixed top-0 left-0 h-full w-64 bg-gray-800 shadow-lg transform transition-transform duration-300 z-50",
          isOpen ? "translate-x-0" : "-translate-x-full",
        )}
      >
        <div className="p-4 flex justify-between items-center border-b border-gray-700">
          <span className="text-xl font-bold text-white">Menu</span>
          <X
            size={24}
            className="cursor-pointer text-white"
            onClick={() => setIsOpen(false)}
          />
        </div>
        <div className="flex flex-col p-4 gap-4">
          {items.map((item, index) => (
                          <Link
              key={index}
              to={item.path}
              className="text-white hover:text-blue-400 transition-colors"
              onClick={() => setIsOpen(false)}
            >
              {item.name}
            </Link>
          ))}
          <Link
            to="/login"
            className="mt-4"
          >
            <Button className="w-full bg-blue-600 hover:bg-blue-700">Login</Button>
          </Link>
        </div>
      </div>

      {/* Overlay to close mobile nav */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black opacity-50 z-40"
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
}